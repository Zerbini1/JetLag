var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();

// üöÄ Endpoint principal do JetLag - IMPLEMENTADO!
app.MapPost("/api/jetlag/calculate", (JetLagRequest request) =>
{
    // Fusos hor√°rios dos principais pa√≠ses (UTC)
    var fusos = new Dictionary<string, int>
    {
        ["Brasil"] = -3,
        ["Estados Unidos"] = -5,    // East Coast
        ["Jap√£o"] = 9,
        ["Reino Unido"] = 0,
        ["Fran√ßa"] = 1,
        ["Alemanha"] = 1,
        ["China"] = 8,
        ["Austr√°lia"] = 10,         // Sydney
        ["Argentina"] = -3,
        ["M√©xico"] = -6
    };

    // Valida√ß√£o: pa√≠ses suportados
    if (!fusos.ContainsKey(request.PaisOrigem) || !fusos.ContainsKey(request.PaisDestino))
    {
        return Results.BadRequest(new
        {
            erro = "Pa√≠s n√£o suportado",
            paisesDisponiveis = fusos.Keys.ToArray()
        });
    }

    // C√°lculos baseados em regras m√©dicas estabelecidas
    int diferencaFuso = fusos[request.PaisDestino] - fusos[request.PaisOrigem];
    int diasAdaptacao = Math.Abs(diferencaFuso); // 1 dia por hora (regra m√©dica)

    // Dicas baseadas na diferen√ßa de fuso
    string dica = Math.Abs(diferencaFuso) switch
    {
        0 => "Sem diferen√ßa de fuso! Viagem tranquila.",
        >= 1 and <= 2 => "Diferen√ßa pequena. Seu corpo se adapta naturalmente em 1-2 dias.",
        >= 3 and <= 5 => "Diferen√ßa moderada. Evite cafe√≠na 6h antes do novo hor√°rio de dormir.",
        >= 6 and <= 8 => "Diferen√ßa consider√°vel. Comece a ajustar seu hor√°rio 2-3 dias antes da viagem.",
        _ => "Diferen√ßa extrema! Ajuste gradual do hor√°rio uma semana antes √© recomendado."
    };

    // Monta resposta estruturada
    var response = new JetLagResponse(
        DiferencaFusoHoras: diferencaFuso,
        DiasParaAdaptacao: diasAdaptacao,
        DicaAdaptacao: dica,
        ResumoViagem: $"{request.PaisOrigem} ‚Üí {request.PaisDestino}: {Math.Abs(diferencaFuso)}h de diferen√ßa"
    );

    return Results.Ok(response);
})
.WithName("CalculateJetLag")
.WithSummary("Calcula o tempo de adapta√ß√£o ao jet lag entre pa√≠ses")
.WithOpenApi();

app.Run();

// Models simplificados do dom√≠nio JetLag - ATUALIZADOS!
public record JetLagRequest(
    string PaisOrigem,          // Ex: "Brasil"
    string PaisDestino          // Ex: "Jap√£o" - REMOVIDO DateTime como discutimos
);

public record JetLagResponse(
    int DiferencaFusoHoras,     // Diferen√ßa entre os fusos (+12, -5, etc)
    int DiasParaAdaptacao,      // Quantos dias para se adaptar (sempre Math.Abs da diferen√ßa)
    string DicaAdaptacao,       // Uma dica personalizada baseada na diferen√ßa
    string ResumoViagem         // Resumo da viagem
);
